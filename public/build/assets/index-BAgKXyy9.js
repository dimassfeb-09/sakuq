import{r as n,t as a}from"./app-QnlSuv68.js";import{u as m}from"./index-C6-eADmE.js";function C(t,o,{checkForDefaultPrevented:e=!0}={}){return function(s){if(t==null||t(s),e===!1||!s.defaultPrevented)return o==null?void 0:o(s)}}var I=a[" useId ".trim().toString()]||(()=>{}),w=0;function U(t){const[o,e]=n.useState(I());return m(()=>{e(r=>r??String(w++))},[t]),o?`radix-${o}`:""}var R=a[" useInsertionEffect ".trim().toString()]||m;function k({prop:t,defaultProp:o,onChange:e=()=>{},caller:r}){const[s,c,u]=$({defaultProp:o,onChange:e}),f=t!==void 0,S=f?t:s;{const l=n.useRef(t!==void 0);n.useEffect(()=>{const i=l.current;i!==f&&console.warn(`${r} is changing from ${i?"controlled":"uncontrolled"} to ${f?"controlled":"uncontrolled"}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`),l.current=f},[f,r])}const v=n.useCallback(l=>{var i;if(f){const d=b(l)?l(t):l;d!==t&&((i=u.current)==null||i.call(u,d))}else c(l)},[f,t,c,u]);return[S,v]}function $({defaultProp:t,onChange:o}){const[e,r]=n.useState(t),s=n.useRef(e),c=n.useRef(o);return R(()=>{c.current=o},[o]),n.useEffect(()=>{var u;s.current!==e&&((u=c.current)==null||u.call(c,e),s.current=e)},[e,s]),[e,r,c]}function b(t){return typeof t=="function"}export{U as a,C as c,k as u};
